import sys
import copy

#in order to easy get the nodes set up the BayesNetwork:
class BayesNetwork:
    def __init__(self):
        #parents node must be add before my child , homework has make the order correctly
        self.node_name_list = []
        self.nodes_list=[]
        self.utility_node = None

    def add_bayesNode(self, node):
        self.node_name_list.append(node.name)
        self.nodes_list.append(node)

    def get_bayesNode(self,node_name):
        index = self.node_name_list.index(node_name)
        return self.nodes_list[index]

class BayesNode:
    def __init__ (self, name, parents, cpt, node_type):
        self.name = name
        self.parents = parents
        self.cpt = cpt
        self.type = node_type

    def get_p(self,symbol,current_events):
        '''
        :param symbol: ' + ' ' -'
        :param current_event:  current event have been add to current_events map
        :return:
        '''
        if self.type == "decision":
            return 1.0
        # if it is not descision need to calcuate the p
        # need loop the table to find out the different situation
        for i in range(len(self.cpt)):
            find = True
            for j in range(len(self.parents)):
                parent = self.parents[j]
                val = self.cpt[i][j+1]
                if current_events[parent] != val:
                    find = False
                    break
            if find:
                if symbol == '+': return self.cpt[i][0]
                else: return 1.0 - self.cpt[i][0]



# below is the function we need:
def go(query_sentence):
    key = query_sentence.split('(')[0]
    #print key
    args_list =query_sentence.split('(')[1].split(')')[0]
    if key == 'P':
        if ' | ' in args_list: # this will be conditional probability problem
            args_list = args_list.split(' | ' )
            con_var = args_list[0]
            evi_var = args_list[1]
            con_var = con_var.split(', ')
            evi_var = evi_var.split(', ')
            con_var_dict = {}
            evi_var_dict = {}
            #store all the condition query part in map
            for var in con_var:
                tmp = var.split(' = ')
                con_var_dict[tmp[0]] = tmp[1]

            for var in evi_var :
                tmp = var.split(' = ')
                evi_var_dict[tmp[0]] = tmp[1]
            p = enumeration_ask(con_var_dict, evi_var_dict, my_bayes_net)
            writeReuslt("P", p)



        else: #prior
            con_var = args_list.split(', ')
            even_dict = {}
            for var in con_var:
                tmp = var.split(' = ')
                even_dict[tmp[0]] = tmp[1]
            # need to calcuate the e
            p = enumerate_all(my_bayes_net.node_name_list, even_dict, my_bayes_net)
            writeReuslt("P", p)



    elif key == 'EU':
         args_list = args_list.split(' | ' )
         if(len(args_list) > 1):
             args_list[0] = args_list[0] + ', '+ args_list[1]
         args = args_list[0].split(', ')
         evidence= {}
         for content in args:
             content = content.split(' = ')
             evidence[content[0]] = content[1]
         eu = compute_eu(evidence, my_bayes_net)
         writeReuslt("EU", eu)

    elif key == 'MEU': #condiction is not set up ,but evidence must be now happen or not
         args_list = args_list.split(' | ' )
         evi_dict = {}
         con_vars_arr = [] # con_dict won't have "+" or "-"
         if len(args_list) > 1: # need to get evidnce
            evi_vars = args_list[1].split(', ')
            for evi in evi_vars:
                evi = evi.split(' = ')
                evi_dict[evi[0]] = evi[1]
         # no matter we have evidence or not , we need store con_dict
         con_vars = args_list[0].split(', ')
         for con in con_vars:
             con_vars_arr.append(con)
         # already store well the MEU data need to call compute_meu
         con_value, meu =compute_meu(con_vars_arr, evi_dict, my_bayes_net)
         #print con_value
         writeReuslt("MEU", meu, con_value)

def writeReuslt(a,b,c = []):
    if a == 'P':
        result.write("%.2f" %round(b, 2))
    elif a == 'EU':#python 3.2 round(2.5) equal 2
        result.write(str(int(round(b))))
    elif a == 'MEU':
        meu_line = ''
        for val in c:
            meu_line += val + ' '
        result.write(meu_line + str(int(round(b))))


def compute_meu(con_vars_arr=[], evi_dict={}, bn = BayesNetwork()):
    '''
    :param con_vars_arr: can't be the same as evi_dict, so this won't need check the n and d difference
    :param evi_dict:
    :return:
    '''
    # need to grant "+" or "-" for con_vars_arr
    max_eu = -2147483648
    max_eu_con_var_value = []
    con_var_length = len(con_vars_arr)
    for i in range(2**con_var_length):
        tmp_con_value_arr = get_var_values(i, con_var_length)
        con_evi = copy.deepcopy(evi_dict)
        #contruct con_evi dict , need to add the con var and con_var_value
        for j in range(con_var_length):
            con_evi[con_vars_arr[j]] = tmp_con_value_arr[j]
            eu = compute_eu(con_evi, bn)
            if(eu > max_eu):
                max_eu = eu
                max_eu_con_var_value = tmp_con_value_arr
     #after compute all the get the most max one
    return max_eu_con_var_value,max_eu

def compute_eu(e={}, bn=BayesNetwork()):
    # get the utility node
    utility_node = bn.utility_node
    # get the parents
    utility_node_parents = utility_node.parents
    # need to loop very row in  utility_node.cpt
    #print utility_node.cpt
    sum_eu = 0.0
    for row in utility_node.cpt:
        con_dict = {}
        for j in range(len(utility_node_parents)):  #construct the con_dict
            con_dict[utility_node_parents[j]] = row[j+1]
        #print row[0]
        sum_eu += enumeration_ask(con_dict, e, bn) * row[0]
        #print sum_eu
    return sum_eu

def enumeration_ask(n_dict, d_dict, bn):
    """
    :param mol_dict: condition dict {leak:+}
    :param mol_dict: evidence
    :param bn:bayes network
    :return: p
    """
    #print n_dict
    # delete all the descision node in

    for x in n_dict.keys():
        if d_dict.__contains__(x):
           if d_dict[x] != n_dict[x]:
               return 0.0
           else:
               n_dict.__delitem__(x)

    dist_table_row= 2 ** len(n_dict)
    n_p=0
    sum_p=0
    index = 0
    # found out the original index
    for n in range(len(n_dict)):
            tmp=n_dict.keys()[n]
            if n_dict[tmp] == '+':
                index += 0
            else:
                index += 1 * (2**n);
    #print "this is index"
    #print index

    for row in range(dist_table_row):
        var_values = get_var_values(row, len(n_dict))
        nd_dict=copy.deepcopy(d_dict)
        for j in range(len(n_dict)):
            tmp=n_dict.keys()[j]
            nd_dict[tmp]=var_values[j]
        p1 = enumerate_all(my_bayes_net.node_name_list, nd_dict, my_bayes_net)
        if(row == index):
            n_p = p1 # record the original p for original sentence
        sum_p +=p1
    p = n_p/sum_p
    return p


def get_var_values(num, vars_number):
    arr = []
    for i in range(vars_number):
        if (num >> i ) & 1 == 0:
             arr.append('+')
        else:
            arr.append('-')
    return arr


def enumerate_all(variables, e, bn):
    # e present for all the atomic
    if not variables:
        return 1.0

    Y, rest = variables[0], variables[1:]
    node = bn.get_bayesNode(Y)
    if Y in e.keys():
         return node.get_p(e[Y], e) * enumerate_all(rest, e, bn)
    else:
        # if Y not in the e, need to add y + and  y - situation to the event
         eY_ture = copy.deepcopy(e)
         eY_ture[Y] = '+'
         eY_false = copy.deepcopy(e)
         eY_false[Y] = '-'
         #Figure 14.8 is good explation for this part
         return node.get_p('+',e) * enumerate_all(rest, eY_ture, bn) + node.get_p('-',e) * enumerate_all(rest, eY_false, bn)






##------------------------------ data precessor--------------------------------------------###
#get the input
fileName = sys.argv[2]
#fileName ="sample05.txt"
input_file = open(fileName,'r')
result_file = "output.txt"
result = open(result_file, 'w')

# create a query_list to store all the query;

query_list = []
query = input_file.readline().strip('\n')
while query != "******":
    query_list.append(query)
    query = input_file.readline().strip('\n')


#print(query_list)
# create a bayesNodeList to store All the bayesNodes

my_bayes_net = BayesNetwork()
query = input_file.readline().strip('\n')

while query != '': # get the node input information
    #print query
    tmp_arr = query.split(' ')
    nodeName = tmp_arr[0]
    parents= tmp_arr[2:]
    #print parents
    is_decision = False
    cpt =[]
    # according the ** to counter the row in table
    for i in range(2 ** len(parents)):
        table_line= input_file.readline().strip('\n').split(' ')
        if table_line[0] == 'decision':
            is_decision = True
        else:
            table_line[0] = float(table_line[0])
            cpt.append(table_line)

    #node already can be created
    if is_decision == True:
        nodeType = "decision"
    else:
        nodeType= "nondecision"
   # store in dict
    node = BayesNode(nodeName, parents, cpt, nodeType)
    my_bayes_net.add_bayesNode(node)
    # next line should be *** or "" or *****
    query = input_file.readline().strip('\n')
    # if query not equal to *** , all node have been store
    if(query != "***"):
       break
    # if equal to *** need to continue
    query = input_file.readline().strip('\n')

# print (bayesNodeDict)
# need to handle utility situation
# handle utility node
if (query == "******"):
    uti_tmps  = input_file.readline().strip('\n').strip(' ').split(' ')
    #print(uti_tmps)
    nodeName = uti_tmps[0]
    #print tmp_arr[0]
    parents= uti_tmps[2:]
    cpt =[]
    # according the ** to counter the row in table
    for i in range(2 ** len(parents)):
        table_line= input_file.readline().strip('\n').split(' ')
        table_line[0] = float(table_line[0])
        cpt.append(table_line)
    node = BayesNode(nodeName, parents, cpt, 'utility')
    my_bayes_net.utility_node = node
'''
#already check the result is right
for i in range(len(my_bayes_net.nodes_list)):
    print(my_bayes_net.nodes_list[i].name)
    print(my_bayes_net.nodes_list[i].parents)
    print(my_bayes_net.nodes_list[i].cpt)
    print(my_bayes_net.nodes_list[i].type)
'''

input_file.close()


#-----------------------------------------XXXXX-----------------------------------------#



firstline_flag = True
for i in range(len(query_list)):
    if firstline_flag != True:
        result.write('\n')
    firstline_flag = False
    go(query_list[i])

result.close()
